plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.owasp.dependencycheck' version '8.3.1'
	id 'com.diffplug.spotless' version '6.19.0'
	id 'com.github.spotbugs' version '5.0.14'
	id 'pmd'
	id 'checkstyle'
}

group = 'app.codeodyssey'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	testImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.18.3'
	testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.18.3'
	testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.18.3'
}

tasks.named('test') {
	useJUnitPlatform()
}

dependencyCheck {
	failOnError = false
}

spotless {
	java {
		target fileTree('.') {
			include '**/*.java'
			exclude '**/build/**', '**/build-*/**'
		}
		toggleOffOn()
		palantirJavaFormat()
		encoding("UTF-8")
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}

	format 'misc', {
		target '**/*.gradle', '**/*.xml', '**/.gitignore', '**/.properties', '**/*.yml', '**/*.sql'
		targetExclude ".gradle/**", ".idea/**", "*/build/**"
		encoding("UTF-8")
		trimTrailingWhitespace()
		endWithNewline()
	}
}

spotbugs {
	toolVersion = '4.7.3'
	excludeFilter = rootProject.file('config/spotbugs/findbugs-exclude.xml')
	ignoreFailures = false
	spotbugsMain.enabled = true
	spotbugsTest.enabled = false
}

spotbugsMain {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

pmd {
	sourceSets = [ project.sourceSets.main ]
	consoleOutput = true
	toolVersion = "6.55.0"
	ruleSets = []
	ruleSetFiles = rootProject.files("config/pmd/ruleset.xml")
}

checkstyle {
	toolVersion = '10.12.1'
	ignoreFailures = false
	configFile = rootProject.file('config/checkstyle/checkstyle.xml')
	configDirectory = rootProject.file("config/checkstyle")
	sourceSets = [sourceSets.main]
}
